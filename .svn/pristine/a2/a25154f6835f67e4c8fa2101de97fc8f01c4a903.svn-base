//
//  CaseHistoryView.m
//  dawnEye
//
//  Created by KockPeter on 16/3/9.
//  Copyright ¬© 2016Âπ¥ kockPeter. All rights reserved.
//

#import "CaseHistoryView.h"
#import "GroupModel.h"
#import "GroupDetailModel.h"
#import "GruopDetailTableViewCell.h"
//#import "NewPientClipViewController.h"
#import "NewPatientScViewController.h"

#import "PersonCenterClipViewController.h"
#import "LongPressRestClip.h"
#import "KeyClipViewController.h"
#import "CaseDiscussViewController.h"
#import "SearchGroupViewController.h"

#define deleGroup @"Âà†Èô§ËØ•ÂàÜÁªÑÂêéÔºåÁªÑÂÜÖËÅîÁ≥ª‰∫∫Â∞ÜÁßªËá≥ÈªòËÆ§ÂàÜÁªÑÔºåÁ°ÆÂÆöÂà†Èô§Ê≠§ÂàÜÁªÑÔºü"

@interface CaseHistoryView ()<UITableViewDelegate,UITableViewDataSource,BasePickerViewDelegate>
{
    UITableView *_tableViewGroup;
    NSMutableArray *_arryGroup;
    NSMutableArray *_stateArry;
    
    NSIndexPath *_selectedIndexPath;
    NSInteger _selectedRow;

    BasePickerView *_basePickerView;
    
    MBProgressHUD *_HUD;
}
@end

@implementation CaseHistoryView

-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    self.tabBarController.tabBar.hidden = NO;
       [self.view endEditing:YES];
    [self.navigationController.navigationBar setTitleTextAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:19],NSForegroundColorAttributeName:[UIColor whiteColor]}];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    self.title = @"ÁóÖÂéÜÂ§π";
    
    [self getDataSourceIsShowHUD];

}

-(void)viewDidLoad
{
    [super viewDidLoad];
    self.view.backgroundColor = kBackgroundColor;
    self.automaticallyAdjustsScrollViewInsets = NO;
    
    UIButton *btnSearchCon = [UIButton buttonWithType:UIButtonTypeCustom];
    btnSearchCon.backgroundColor = [UIColor whiteColor];
    btnSearchCon.frame = CGRectMake(20, 60+10, kWith-40, 30);
    [btnSearchCon setTitle:@"üîçËæìÂÖ•ÊÇ£ËÄÖÁõ∏ÂÖ≥‰ø°ÊÅØ" forState:UIControlStateNormal];
    [btnSearchCon setTitleColor:kBoradColor forState:UIControlStateNormal];
    [btnSearchCon addTarget:self action:@selector(onSearchGroup) forControlEvents:UIControlEventTouchUpInside];
    btnSearchCon.layer.cornerRadius = 3;
    btnSearchCon.layer.masksToBounds = YES;
    [self.view addSubview:btnSearchCon];
    
    UIBarButtonItem *rightClip =[[UIBarButtonItem alloc]initWithTitle:@"Êñ∞Â¢û" style:UIBarButtonItemStylePlain target:self action:@selector(onBtnClip)];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    self.navigationItem.rightBarButtonItem = rightClip;
        
    [self creatPatienLi];

    _tableViewGroup = [[UITableView alloc]initWithFrame:CGRectMake(0, 210, kWith, kHeight - 210 - 49) style:UITableViewStyleGrouped];
    _tableViewGroup.dataSource = self;
    _tableViewGroup.delegate = self;
    _tableViewGroup.rowHeight = 60;
    [self.view addSubview:_tableViewGroup];
    [_tableViewGroup registerClass:[UITableViewCell class] forCellReuseIdentifier:@"patientClip"];
    
    _basePickerView  = [[BasePickerView alloc]init];
    _basePickerView.delegate = self;
    [[UIApplication sharedApplication].keyWindow.rootViewController.view addSubview:_basePickerView];
    
}

-(void)getDataSourceIsShowHUD{
    if (!_HUD) {
        _HUD = [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    }
    _HUD.mode = MBProgressHUDModeIndeterminate;
    _HUD.labelText = @"Ê≠£Âú®Âä†ËΩΩ";
    _HUD.hidden = NO;
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [RequestManager getGroupListClip:[NSString stringWithFormat:@"%@/api/Doctor/GetGroupByDoc",NET_URLSTRING] Parameters:dic Complation:^(NSMutableArray *arry) {
        _arryGroup = arry;
        _stateArry  = [NSMutableArray array];
        for (NSInteger i = 0; i<_arryGroup.count; i++) {
            [_stateArry addObject:@"hidden"];
        }
        [_tableViewGroup reloadData];
        _HUD.hidden = YES;
        
    } Fail:^(NSError *error) {
        _HUD.hidden = YES;
        kAlter(kFail);
    }];
}

#pragma mark--------------ËÆæÁΩÆÂàóË°®
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return _arryGroup.count;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    NSString *state = _stateArry[section];
    GroupModel *model = _arryGroup[section];
    if ([state isEqualToString:@"hidden"]) {
        return 0;
    }else{
        return model.groupDetail.count;
    }
}

-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    return 40;
}

-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{
    return 2;
}

-(UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
    
    NSString *str = _stateArry[section];
    UIView *viewHeader =[[ UIView alloc]initWithFrame:CGRectMake(0, 0, kWith, 40)];
    viewHeader.backgroundColor = [UIColor whiteColor];
    
    UIImageView *image = [[UIImageView alloc]initWithFrame:CGRectMake(kWith-25, 15, 15, 8)];
    if ([str isEqualToString:@"hidden"]) {
        image.image = [UIImage imageNamed:@"arrow_down_gray"];
    }else
    {
        image.image = [UIImage imageNamed:@"arrow_up_gray"];
    }
    [viewHeader addSubview:image];
    
    UILabel *lbl = [[UILabel alloc]initWithFrame:CGRectMake(10, 5, kWith - 50, 30)];
    GroupModel *model = _arryGroup[section];
    lbl.text = model.groupName;
    lbl.font = [UIFont systemFontOfSize:14];
    [viewHeader addSubview:lbl];
    
    UIControl *colon = [[UIControl alloc]initWithFrame:CGRectMake(0, 0, kWith, 40)];
    colon.tag = 1300+section;
    [colon addTarget:self action:@selector(onStateTableGrop:) forControlEvents:UIControlEventTouchUpInside];
    [viewHeader addSubview:colon];
    
    LongPressRestClip *longPress = [[LongPressRestClip alloc]initWithTarget:self action:@selector(onLongPreseeSectionHeader:)];
    longPress.tag = 1570+section;
    longPress.longId = model.Id;
    [viewHeader addGestureRecognizer:longPress];
    return viewHeader;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    static NSString *user = @"ClipGroupDetail";
    GruopDetailTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:user];
    if (cell == nil) {
        cell = [[GruopDetailTableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:user];
    }
    GroupModel *model = _arryGroup[indexPath.section];
    GroupDetailModel *detailModel = model.groupDetail[indexPath.row];
    cell.lblName.text = detailModel.name;
    [cell.imageAvater sd_setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@",NET_URLSTRING]] placeholderImage:[UIImage imageNamed:@"‰∫∫Áâ©"]];
    return cell;
}

- (nullable NSArray<UITableViewRowAction *> *)tableView:(UITableView *)tableView editActionsForRowAtIndexPath:(NSIndexPath *)indexPath{

    UITableViewRowAction *deleteRowAction = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDestructive title:@"Âà†Èô§" handler:^(UITableViewRowAction *action, NSIndexPath *indexPath) {
        [self deleTableNSIndex:indexPath tale:tableView];
    }];
    
    UITableViewRowAction *moreRowAction = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleNormal title:@"ÁßªÂä®ÂàÜÁªÑ" handler:^(UITableViewRowAction *action, NSIndexPath *indexPath) {
        [self tableMove:indexPath];
    }];
    return @[deleteRowAction,moreRowAction];
}

#pragma mark--------------Âà†Èô§ÂàÜÁªÑ
-(void)deleTableNSIndex:(NSIndexPath *)indexPath tale:(UITableView *)tableView{
    UIAlertController *alter = [UIAlertController alertControllerWithTitle:@"ÊèêÁ§∫" message:@"ÊÇ®Á°ÆÂÆöÂà†Èô§ËØ•ÊÇ£ËÄÖÂêóÔºü" preferredStyle:UIAlertControllerStyleAlert];
    [alter addAction:[UIAlertAction actionWithTitle:@"ÂèñÊ∂à" style:UIAlertActionStyleCancel handler:nil]];
    [alter addAction:[UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        NSMutableDictionary *dic =[NSMutableDictionary dictionary];
        GroupModel *model = _arryGroup[indexPath.section];
        GroupDetailModel *detailModel = model.groupDetail[indexPath.row];
        [dic setObject:detailModel.Id forKey:@"id"];
        [RequestManager publishFreeHill:[NSString stringWithFormat:@"%@/api/Doctor/PatientDelete",NET_URLSTRING] Parameters:dic Complation:^(NSNumber *code) {
            if ([code integerValue] == 10000) {
                [model.groupDetail removeObjectAtIndex:indexPath.row];
                [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
            }
        } Fail:^(NSError *error) {
            kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
        }];
    }]];
    [self presentViewController:alter animated:YES completion:nil];
}

#pragma mark--------------ÁßªÂä®ÂàÜÁªÑ
-(void)tableMove:(NSIndexPath *)indexPath{
    NSMutableArray *arryName = [NSMutableArray array];
    for (GroupModel *modelDes in _arryGroup) {
        [arryName addObject:modelDes.groupName];
    }
    
    NSMutableArray *arry = [NSMutableArray array];
    [arry addObject:arryName];
    _selectedIndexPath = indexPath;
    [_basePickerView pickerDelegateShow:arry];
}

-(void)setPicker:(NSString *)count{
  
    for (NSInteger i = 0; i<_arryGroup.count; i++) {
        GroupModel *modelDes = _arryGroup[i];
        if ([count isEqualToString:modelDes.groupName]) {
            [self onSureDocPicCaseGroupId:modelDes MovedSection:i];
            break;
        }
    }
}

-(void)onSureDocPicCaseGroupId:(GroupModel *)modelDes MovedSection:(NSInteger)selectedSection{
    GroupModel *model = _arryGroup[_selectedIndexPath.section];
    GroupDetailModel *detailModel = model.groupDetail[_selectedIndexPath.row];

    _HUD.hidden = NO;

    NSMutableDictionary *dic =[NSMutableDictionary dictionary];
    [dic setObject:detailModel.Id forKey:@"patientId"];
    [dic setObject:modelDes.Id forKey:@"groupId"];
    [RequestManager CloseOnLine:[NSString stringWithFormat:@"%@/api/Doctor/PatientGroupMove",NET_URLSTRING] Parameters:dic Complation:^(NSNumber *code) {
        _HUD.hidden = YES;
        if ([code integerValue] == 10000) {
            [model.groupDetail removeObject:detailModel];
            [modelDes.groupDetail insertObject:detailModel atIndex:0];
            NSMutableIndexSet *set = [NSMutableIndexSet indexSetWithIndex:_selectedIndexPath.section];
            [set addIndex:selectedSection];
            [_tableViewGroup reloadSections:set withRowAnimation:UITableViewRowAnimationFade];
            _tableViewGroup.editing = NO;
        }else{
            kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
        }

    } Fail:^(NSError *error) {
        _HUD.hidden = YES;
        kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
    }];
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    GroupModel *model = _arryGroup[indexPath.section];
    GroupDetailModel *detailModel = model.groupDetail[indexPath.row];
    PersonCenterClipViewController *per = [[PersonCenterClipViewController alloc]init];
    per.group = detailModel;
    [self.navigationController pushViewController:per animated:YES];
}

#pragma mark--------------ÊäòÂêàË°®
-(void)onStateTableGrop:(UIControl *)colo{

    NSString *str = _stateArry[colo.tag - 1300];
    if ([str isEqualToString:@"hidden"]) {
        [_stateArry replaceObjectAtIndex:colo.tag - 1300 withObject:@"show"];
        GroupModel *model = _arryGroup[colo.tag - 1300];
        NSMutableDictionary *dic = [NSMutableDictionary dictionary];
        [dic setObject:model.Id forKey:@"groupId"];

        _HUD.hidden = NO;
        [RequestManager getGroupDetailListClip:[NSString stringWithFormat:@"%@/api/Doctor/GetPatientByGroup",NET_URLSTRING] Parameters:dic Complation:^(NSMutableArray *arry) {
            model.groupDetail = arry;
            NSIndexSet *set = [NSIndexSet indexSetWithIndex:colo.tag - 1300];
            [_tableViewGroup reloadSections:set withRowAnimation:UITableViewRowAnimationFade];
            _HUD.hidden = YES;
        } Fail:^(NSError *error) {
            _HUD.hidden = YES;
            kAlter(kFail);
        }];
    }else
    {
     [_stateArry replaceObjectAtIndex:colo.tag - 1300 withObject:@"hidden"];
        NSIndexSet *set = [NSIndexSet indexSetWithIndex:colo.tag - 1300];
        [_tableViewGroup reloadSections:set withRowAnimation:UITableViewRowAnimationFade];
    }
}

#pragma mark--------------ËÆ®ËÆ∫‰∏≠ÁöÑÁóÖ‰æã‰∏éÈáçÁÇπÁóÖ‰æã
-(void)creatPatienLi{
    NSArray *arryImage = [NSArray arrayWithObjects:@"iËÆ®ËÆ∫‰∏≠ÁöÑÁóÖÂéÜ",@"iÈáçÁÇπÂÖ≥Ê≥®ÁöÑÁóÖÂéÜ", nil];
    NSArray *arryHeader = [NSArray arrayWithObjects:@"ËÆ®ËÆ∫‰∏≠ÁöÑÁóÖ‰æã",@"ÈáçÁÇπÂÖ≥Ê≥®ÁöÑÁóÖÂéÜ", nil];
    for (NSInteger i = 0; i<2; i++) {
        UIView *viewWidth = [[UIView alloc]init];
        viewWidth.frame = CGRectMake(((kWith -2)/2+2)*i, 110, (kWith - 2)/2, 60);
        viewWidth.backgroundColor = [UIColor whiteColor];
        [self.view addSubview:viewWidth];
        
        UILabel *lbl = [[UILabel alloc]initWithFrame:CGRectMake(0, 10, viewWidth.frame.size.width, 30)];
        lbl.textAlignment = 1;
        lbl.text = arryHeader[i];
        lbl.font = [UIFont systemFontOfSize:14];
        [viewWidth addSubview:lbl];
        
//        UILabel *lblcount = [[UILabel alloc]initWithFrame:CGRectMake(0, 30, viewWidth.frame.size.width, 30)];
//        lblcount.textAlignment = 1;
//        lblcount.textColor = [UIColor redColor];
//        lblcount.text = @"5";
//        lblcount.font  =  [UIFont systemFontOfSize:15];
//        [viewWidth addSubview:lblcount];
        
        UIImageView *imageVi = [[UIImageView alloc]initWithFrame:CGRectMake(10, 10, 15, 25)];
        imageVi.image = [UIImage imageNamed:arryImage[i]];
        [viewWidth addSubview:imageVi];
        
        UIButton *btnClip = [[UIButton alloc]initWithFrame:viewWidth.frame];
        btnClip.tag = 2000+i;
        [btnClip addTarget:self action:@selector(onBtnClip:) forControlEvents:UIControlEventTouchUpInside];
        [self.view addSubview:btnClip];
    }
    
    UILabel *lblGrup = [[UILabel alloc]initWithFrame:CGRectMake(10, 170, 150, 40)];
    lblGrup.text = @"ÊÇ£ËÄÖÂàÜÁªÑ";
    lblGrup.font = [UIFont systemFontOfSize:14];
    [self.view addSubview:lblGrup];
    
    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
    btn.frame = CGRectMake(kWith - 80, 170, 70, 40);
    [btn setTitleColor:BLUECOLOR_STYLE forState:UIControlStateNormal];
    [btn setTitleColor:[UIColor whiteColor] forState:UIControlStateHighlighted];
    [btn addTarget:self action:@selector(onBtnAddGroup) forControlEvents:UIControlEventTouchUpInside];
    btn.titleLabel.font = [UIFont systemFontOfSize:14];
    [btn setTitle:@"Êñ∞Âª∫ÂàÜÁªÑ" forState:UIControlStateNormal];
    btn.titleLabel.font = [UIFont fontWithName:@"Helvetica-BoldOblique" size:15];
    [self.view addSubview:btn];
}

-(void)onBtnClip:(UIButton *)btnClip{

    if (btnClip.tag == 2000) {
        NSDictionary *dicLog = [kUserDefatuel objectForKey:@"DoctorDataDic"];
        if ([[dicLog objectForKey:@"state"] integerValue]==2) {
            CaseDiscussViewController *caseDiss =[[CaseDiscussViewController alloc]init];
            [self.navigationController pushViewController:caseDiss animated:YES];
        }else
        {
            IsCertificateViewController *isCer = [[IsCertificateViewController alloc]init];
            isCer.from = @"ÁóÖÂéÜËÆ®ËÆ∫";
            [self.navigationController pushViewController:isCer animated:YES];
            return;
        }
    }else
    {
        KeyClipViewController *key = [[KeyClipViewController alloc]init];
        [self.navigationController pushViewController:key animated:YES];
    }
    
}

#pragma mark--------------Ê∑ªÂä†ÂàÜÁªÑ
-(void)onBtnAddGroup{
    UIAlertController *alter = [UIAlertController alertControllerWithTitle:nil message:@"ÂàõÂª∫ÂàÜÁªÑ" preferredStyle:UIAlertControllerStyleAlert];
    [alter addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
        textField.textAlignment  =1;
        textField.placeholder = @"ËØ∑ËæìÂÖ•ÁªÑÂêç";
    }];
    [alter addAction:[UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        for (UITextField *tf in alter.textFields) {
            [self sureDocAlterdefaultClip:tf.text];
        }
    }]];
    [alter addAction:[UIAlertAction actionWithTitle:@"ÂèñÊ∂à" style:UIAlertActionStyleCancel handler:nil]];
    [self presentViewController:alter animated:YES completion:nil
     ];
}

-(void)sureDocAlterdefaultClip:(NSString *)text{
    if (text == nil || [text isEqualToString:@""]) {
        kAlter(@"Êñ∞Â¢ûÂàÜÁªÑÂêç‰∏∫Á©∫");
        return;
    }
    NSMutableDictionary *dic = [[NSMutableDictionary alloc]init];
    [dic setObject:text forKey:@"groupName"];

    _HUD.hidden = NO;

    [RequestManager publishFreeHill:[NSString stringWithFormat:@"%@/api/Doctor/AddGroup",NET_URLSTRING] Parameters:dic Complation:^(NSNumber *code) {
        _HUD.hidden = YES;

        if ([code integerValue] == 10000) {
            [self getDataSourceIsShowHUD];
        }else
        {
            kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
        }
    } Fail:^(NSError *error) {
        _HUD.hidden = YES;
        kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
    }];
}

#pragma mark--------------Âà†Èô§ÂàÜÁªÑ‰∏éÊîπÂêç
-(void)onLongPreseeSectionHeader:(LongPressRestClip *)longPress{
    
    UIAlertController *alter = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    [alter addAction:[UIAlertAction actionWithTitle:@"‰øÆÊîπÁªÑÂêç" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        [self alterCustomCAse:(longPress.tag - 1570)];
    }]];
    
    if (longPress.tag != 1570) {
        [alter addAction:[UIAlertAction actionWithTitle:@"Âà†Èô§ÂàÜÁªÑ" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
            
            GroupModel *model = _arryGroup[longPress.tag - 1570];
            if (model.groupDetail.count > 0) {
                UIAlertController *alter = [UIAlertController alertControllerWithTitle:@"ÊèêÁ§∫" message:deleGroup preferredStyle:UIAlertControllerStyleAlert];
                [alter addAction:[UIAlertAction actionWithTitle:@"ÂèñÊ∂à" style:UIAlertActionStyleCancel handler:nil]];
                [alter addAction:[UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                    [self deleteGroup:longPress.longId];
                }]];
                [self presentViewController:alter animated:YES completion:nil];
            }else
            {
                [self deleteGroup:longPress.longId];
            }
        }]];
    }

    [alter addAction:[UIAlertAction actionWithTitle:@"ÂèñÊ∂à" style:UIAlertActionStyleCancel handler:nil]];
    [self presentViewController:alter animated:YES completion:nil];
}

-(void)alterCustomCAse:(NSInteger)tag{
    UIAlertController *alter = [UIAlertController alertControllerWithTitle:nil message:@"ÂàõÂª∫ÂàÜÁªÑ" preferredStyle:UIAlertControllerStyleAlert];
    [alter addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
        textField.textAlignment  =1;
        textField.placeholder = @"ËØ∑ËæìÂÖ•ÁªÑÂêç";
    }];
    [alter addAction:[UIAlertAction actionWithTitle:@"Á°ÆÂÆö" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        GroupModel *model = _arryGroup[tag];
        for (UITextField *tf in alter.textFields) {
            [self onSureEditingGroupNaem:tf.text groupID:model.Id];
        }
    }]];
    [alter addAction:[UIAlertAction actionWithTitle:@"ÂèñÊ∂à" style:UIAlertActionStyleCancel handler:nil]];
    [self presentViewController:alter animated:YES completion:nil
     ];
    
}

-(void)onSureEditingGroupNaem:(NSString *)text groupID:(NSString *)ID{
    NSMutableDictionary *dic = [[NSMutableDictionary alloc]init];
    [dic setObject:text forKey:@"groupName"];
    [dic setObject:ID forKey:@"groupId"];

    _HUD.hidden = NO;

    [RequestManager CloseOnLine:[NSString stringWithFormat:@"%@/api/Doctor/GroupUpDate",NET_URLSTRING] Parameters:dic Complation:^(NSNumber *code) {
        _HUD.hidden = YES;

        if ([code integerValue] == 10000) {
            [self getDataSourceIsShowHUD];
        }else
        {
            kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
        }

    } Fail:^(NSError *error) {
        _HUD.hidden = YES;
        kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
    }];

}

-(void)deleteGroup:(NSString *)ID{
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setObject:ID forKey:@"groupId"];

    _HUD.hidden = NO;

    [RequestManager CloseOnLine:[NSString stringWithFormat:@"%@/api/Doctor/GroupRemove",NET_URLSTRING] Parameters:dic Complation:^(NSNumber *code) {
        _HUD.hidden = YES;

        if ([code integerValue] == 10000) {
            [self getDataSourceIsShowHUD];
        }else{
            kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
        }

    } Fail:^(NSError *error) {
        _HUD.hidden = YES;
        kAlter(@"Êìç‰ΩúÂ§±Ë¥•");
    }];
}

#pragma mark--------------Êñ∞Â¢ûÊÇ£ËÄÖ
-(void)onBtnClip{

    NewPatientScViewController *new = [[NewPatientScViewController alloc]init];
    [self.navigationController pushViewController:new animated:YES];
    
}

-(void)onSearchGroup{
    SearchGroupViewController *search = [[SearchGroupViewController alloc]init];
    [self.navigationController pushViewController:search animated:YES];
}
@end



